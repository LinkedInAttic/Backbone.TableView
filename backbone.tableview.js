// Generated by CoffeeScript 1.3.3
/*
TableView
---------
*/

/*
A View that can be used with any backbone collection, and draws a table with it.
Optionally it supports pagination, search, and any number of filters
("inputs", "button", "option"). Eg (Users is a Backbone.Collection):

    class UserTableView extends Backbone.TableView
        title: "My Users Table"
        collection: new Users()
        columns:
            name:
                header: "My Name"
            type:
                header: "Type"
            last_login:
                header: "Last Login Time"
                draw: (model) ->
                    new Date(model.get 'time')
            description:
                header: "Description"
                nosort: true
                draw: (model) ->
                    some_weird_formatting_function(model.get('some_text'))
        pagination: true
        search:
            query: "name"
            detail: "Search by Name"
        filters:
            from:
                type: "input"
                className: "date"
                init: new Date()
                get: (val) ->
                    ... process the date val ...
            my_btn:
                type: "button"
*/

var ButtonFilter, ButtonOptionFilter, Filter, InputFilter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Backbone.TableView = (function(_super) {

  __extends(TableView, _super);

  function TableView() {
    this.render = __bind(this.render, this);

    this.toggleSort = __bind(this.toggleSort, this);

    this.nextPage = __bind(this.nextPage, this);

    this.prevPage = __bind(this.prevPage, this);

    this.renderData = __bind(this.renderData, this);

    this.update = __bind(this.update, this);

    this.updateSearchOnEnter = __bind(this.updateSearchOnEnter, this);

    this.createFilter = __bind(this.createFilter, this);

    this.setData = __bind(this.setData, this);
    return TableView.__super__.constructor.apply(this, arguments);
  }

  TableView.prototype.tagName = "div";

  TableView.prototype.titleTemplate = _.template("<h2><%= model %></h2>");

  TableView.prototype.searchTemplate = _.template("<input type=\"text\" class=\"search-query pull-right\" placeholder=\"<%= model.detail || model %>\"></input>");

  TableView.prototype.paginationTemplate = _.template("<ul class=\"pager\">\n    <li class=\"pager-prev\">\n        <a href=\"javascript:void(0)\">&larr; Prev</a>\n    </li>\n    <span class=\"badge badge-info page\">1</span>\n    <li class=\"pager-next\">\n        <a href=\"javascript:void(0)\">Next &rarr;</a>\n    </li>\n</ul>");

  TableView.prototype.dataTemplate = _.template("<% _.each(collection.models, function (row) { %>\n    <tr>\n        <% _.each(columns, function (col, name) { %>\n            <td class=\"<%= col.className || \"\" %>\">\n                <%= col.draw ? col.draw(row) : row.get(name) %>\n            </td>\n        <% }) %>\n    </tr>\n<% }) %>\n<% if (collection.models.length == 0) { %>\n    <tr>\n        <td colspan=\"10\"><%= empty %></td>\n    </tr>\n<% } %>");

  TableView.prototype.template = _.template("<div class=\"row-fluid\">\n    <div class=\"span2\">\n        <%= title %>\n    </div>\n\n    <div class=\"filters controls pagination-centered span8\">\n    </div>\n\n    <div class=\"span2\">\n        <%= search %>\n    </div>\n</div>\n\n<table class=\"table table-striped table-bordered\">\n    <thead>\n        <tr>\n            <% _.each(columns, function (col, key) { %>\n                <th abbr=\"<%= key || col %>\" class=\"<%= !col.nosort && \"sorting\" %> <%= col.className || \"\" %>\">\n                    <%= col.header || col %>\n                </th>\n            <% }) %>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td colspan=\"10\"><%= empty %></td>\n        </tr>\n    </tbody>\n</table>\n\n<%= pagination %>");

  TableView.prototype.events = {
    "keypress .search-query": "updateSearchOnEnter",
    "click    .pager-prev": "prevPage",
    "click    .pager-next": "nextPage",
    "click    th": "toggleSort"
  };

  TableView.prototype.initialize = function() {
    var key, val, _ref;
    this.collection.on("reset", this.renderData);
    _ref = this.options;
    for (key in _ref) {
      val = _ref[key];
      this[key] = val || this[key];
    }
    this.data = this.initialData || {};
    this.data.page = this.page || 1;
    this.data.size = this.size || 10;
    return this;
  };

  TableView.prototype.setData = function(id, val) {
    this.data[id] = val;
    return this.update();
  };

  TableView.prototype.createFilter = function(name, filter) {
    switch (filter.type) {
      case "option":
        return new ButtonOptionFilter({
          id: name,
          init: filter.init || "false",
          filterClass: filter.className || "",
          options: filter.options,
          setData: this.setData
        });
      case "button":
        return new ButtonFilter({
          id: name,
          init: filter.init || "false",
          toggle: filter.toggle || "true",
          filterClass: filter.className || "",
          setData: this.setData
        });
      case "input":
        return new InputFilter({
          id: name,
          init: filter.init || "",
          className: "input-prepend inline",
          filterClass: filter.className || "",
          get: filter.get || _.identity,
          setData: this.setData
        });
    }
    filter.setData = this.setData;
    return filter;
  };

  TableView.prototype.updateSearchOnEnter = function(e) {
    var val;
    if (e.keyCode === 13) {
      val = e.currentTarget.value;
      if (val) {
        this.data[this.search.query || "q"] = val;
      } else {
        delete this.data[this.search.query || "q"];
      }
      this.update();
    }
    return this;
  };

  TableView.prototype.update = function() {
    this.collection.fetch({
      data: this.data
    });
    return this;
  };

  TableView.prototype.renderData = function() {
    $("tbody", this.$el).html(this.dataTemplate({
      collection: this.collection,
      columns: this.columns,
      empty: this.empty || "No records to show"
    }));
    return this;
  };

  TableView.prototype.prevPage = function() {
    if (this.data.page > 1) {
      this.data.page = this.data.page - 1;
      $(".page", this.$el).html(this.data.page);
      return this.update();
    }
  };

  TableView.prototype.nextPage = function() {
    if (this.collection.length === this.data.size) {
      this.data.page = this.data.page + 1;
      $(".page", this.$el).html(this.data.page);
      return this.update();
    }
  };

  TableView.prototype.toggleSort = function(e) {
    var cl, el;
    el = e.currentTarget;
    cl = el.className;
    if (cl.indexOf("sorting_desc") >= 0) {
      this.data.sort_dir = "asc";
      cl = "sorting_asc";
    } else if (cl.indexOf("sorting") >= 0 || cl.indexOf("sorting_asc") >= 0) {
      this.data.sort_dir = "desc";
      cl = "sorting_desc";
    } else {
      return this;
    }
    $("th.sorting_desc, th.sorting_asc", this.$el).removeClass("sorting_desc sorting_asc");
    $(el, this.$el).addClass(cl);
    this.data.sort_col = el.abbr;
    return this.update();
  };

  TableView.prototype.applyTemplate = function(template, model) {
    return (model && template({
      model: model
    })) || "";
  };

  TableView.prototype.render = function() {
    var filtersDiv,
      _this = this;
    this.$el.html(this.template({
      columns: this.columns,
      empty: this.empty || "",
      title: this.applyTemplate(this.titleTemplate, this.title),
      search: this.applyTemplate(this.searchTemplate, this.search),
      pagination: this.applyTemplate(this.paginationTemplate, this.pagination)
    }));
    this.filters = _.map(this.filters, function(filter, name) {
      return _this.createFilter(name, filter);
    });
    filtersDiv = $(".filters", this.$el);
    _.each(this.filters, function(filter) {
      filtersDiv.append(filter.render().el);
      return filtersDiv.append(" ");
    });
    return this.update();
  };

  return TableView;

})(Backbone.View);

/*
Filters
-------
*/


Filter = (function(_super) {

  __extends(Filter, _super);

  function Filter() {
    this.render = __bind(this.render, this);
    return Filter.__super__.constructor.apply(this, arguments);
  }

  Filter.prototype.tagName = "div";

  Filter.prototype.className = "inline";

  Filter.prototype.initialize = function() {
    this.id = this.options.id;
    return this.setData = this.options.setData;
  };

  Filter.prototype.prettyName = function(str) {
    return str.charAt(0).toUpperCase() + str.substring(1).replace(/_(\w)/g, function(match, p1) {
      return " " + p1.toUpperCase();
    });
  };

  Filter.prototype.render = function() {
    this.options.name = this.prettyName(this.id);
    this.$el.html(this.template(this.options));
    return this;
  };

  return Filter;

})(Backbone.View);

InputFilter = (function(_super) {

  __extends(InputFilter, _super);

  function InputFilter() {
    this.update = __bind(this.update, this);
    return InputFilter.__super__.constructor.apply(this, arguments);
  }

  InputFilter.prototype.template = _.template("<span class=\"add-on\"><%= name %></span><input type=\"text\" class=\"filter <%= filterClass %>\" value=\"<%= init %>\"></input>");

  InputFilter.prototype.events = {
    "change .filter": "update"
  };

  InputFilter.prototype.update = function(e) {
    return this.setData(this.id, this.options.get(e.currentTarget.value));
  };

  return InputFilter;

})(Filter);

ButtonFilter = (function(_super) {

  __extends(ButtonFilter, _super);

  function ButtonFilter() {
    this.update = __bind(this.update, this);
    return ButtonFilter.__super__.constructor.apply(this, arguments);
  }

  ButtonFilter.prototype.template = _.template("<button type=\"button\" class=\"filter btn <%= filterClass %>\" data-toggle=\"button\"><%= name %></button>");

  ButtonFilter.prototype.events = {
    "click .filter": "update"
  };

  ButtonFilter.prototype.initialize = function() {
    ButtonFilter.__super__.initialize.apply(this, arguments);
    this.values = [this.options.init, this.options.toggle];
    return this.current = 0;
  };

  ButtonFilter.prototype.update = function() {
    this.current = 1 - this.current;
    return this.setData(this.id, this.values[this.current]);
  };

  return ButtonFilter;

})(Filter);

ButtonOptionFilter = (function(_super) {

  __extends(ButtonOptionFilter, _super);

  function ButtonOptionFilter() {
    this.update = __bind(this.update, this);
    return ButtonOptionFilter.__super__.constructor.apply(this, arguments);
  }

  ButtonOptionFilter.prototype.template = _.template("<div class=\"btn-group\" data-toggle=\"buttons-radio\">\n    <% _.each(options, function (el, i) { %>\n        <button class=\"btn <%= (i == 0 && \"active\") || \"\" %>\" value=\"<%= el.value %>\"><%= el.name %></button>\n    <% }) %>\n</div>");

  ButtonOptionFilter.prototype.events = {
    "click .btn": "update"
  };

  ButtonOptionFilter.prototype.initialize = function() {
    var _this = this;
    ButtonOptionFilter.__super__.initialize.apply(this, arguments);
    return this.options.options = _.map(this.options.options, function(option) {
      return {
        name: _this.prettyName(option.name || option),
        value: option.value || option
      };
    });
  };

  ButtonOptionFilter.prototype.update = function(e) {
    return this.setData(this.id, e.currentTarget.value);
  };

  return ButtonOptionFilter;

})(Filter);
