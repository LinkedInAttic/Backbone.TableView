// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Backbone.TableView = (function(_super) {

  __extends(TableView, _super);

  function TableView() {
    this.render = __bind(this.render, this);

    this.toggleSort = __bind(this.toggleSort, this);

    this.nextPage = __bind(this.nextPage, this);

    this.prevPage = __bind(this.prevPage, this);

    this.renderData = __bind(this.renderData, this);

    this.update = __bind(this.update, this);

    this.updateOnEnter = __bind(this.updateOnEnter, this);

    this.printFilter = __bind(this.printFilter, this);
    return TableView.__super__.constructor.apply(this, arguments);
  }

  TableView.prototype.tagName = "div";

  TableView.prototype.titleTemplate = _.template("<h2><%= model %></h2>");

  TableView.prototype.filtersTemplate = _.template("<% _.each(model, function (filter) { %>\n    <%= filter %>\n<% }) %>");

  TableView.prototype.searchTemplate = _.template("<input type=\"text\" class=\"search-query pull-right\" placeholder=\"<%= model.detail || model %>\"></input>");

  TableView.prototype.inputTemplate = _.template("<div class=\"input-prepend inline\">\n    <span class=\"add-on\"><%= name %></span><input id=\"<%= id %>\" type=\"text\" class=\"filter <%= className %>\" value=\"<%= init %>\"></input>\n</div>");

  TableView.prototype.paginationTemplate = _.template("<ul class=\"pager\">\n    <li class=\"pager-prev\">\n        <a href=\"javascript:void(0)\">&larr; Prev</a>\n    </li>\n    <span class=\"badge badge-info page\">1</span>\n    <li class=\"pager-next\">\n        <a href=\"javascript:void(0)\">Next &rarr;</a>\n    </li>\n</ul>");

  TableView.prototype.dataTemplate = _.template("<% _.each(collection.models, function (row, i) { %>\n    <tr>\n        <% _.each(columns, function (col, name) { %>\n            <td class=\"<%= col.className || \"\" %>\">\n                <%= col.draw ? col.draw(row) : row.get(name) %>\n            </td>\n        <% }) %>\n    </tr>\n<% }) %>\n<% if (collection.models.length == 0) { %>\n    <tr>\n        <td colspan=\"10\"><%= empty %></td>\n    </tr>\n<% } %>");

  TableView.prototype.template = _.template("<div class=\"row-fluid\">\n    <div class=\"span2\">\n        <%= title %>\n    </div>\n\n    <div class=\"controls pagination-centered span8\">\n        <%= filters %>\n    </div>\n\n    <div class=\"span2\">\n        <%= search %>\n    </div>\n</div>\n\n<table class=\"table table-striped table-bordered\">\n    <thead>\n        <tr>\n            <% _.each(columns, function (col, key) { %>\n                <th abbr=\"<%= key || col %>\" class=\"<%= !col.nosort && \"sorting\" %> <%= col.className || \"\" %>\">\n                    <%= col.header || col %>\n                </th>\n            <% }) %>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td colspan=\"10\"><%= empty %></td>\n        </tr>\n    </tbody>\n</table>\n\n<%= pagination %>");

  TableView.prototype.events = {
    "keypress .search-query": "updateOnEnter",
    "change   .filter": "update",
    "click    .pager-prev": "prevPage",
    "click    .pager-next": "nextPage",
    "click    th": "toggleSort"
  };

  TableView.prototype.initialize = function() {
    this.collection.on("reset", this.renderData);
    this.page = this.page || 1;
    this.size = this.size || 10;
    return this;
  };

  TableView.prototype.printFilter = function(name, filter) {
    switch (filter.type) {
      case "input":
        return this.inputTemplate({
          name: this.capitalize(name),
          id: "filter" + name,
          init: filter.init || "",
          className: filter.className || ""
        });
    }
    return "";
  };

  TableView.prototype.updateOnEnter = function(e) {
    if (e.keyCode === 13) {
      this.update();
    }
    return this;
  };

  TableView.prototype.update = function() {
    var data, field, filter, key, options, val, _ref, _ref1;
    data = {};
    _ref = this.initialData;
    for (key in _ref) {
      val = _ref[key];
      data[key] = val;
    }
    _ref1 = this.filters;
    for (filter in _ref1) {
      options = _ref1[filter];
      field = $("#filter" + filter, this.$el);
      if (field) {
        val = field.val();
        data[filter] = ((options.get != null) && options.get(val)) || val;
      }
    }
    if (this.search) {
      data[this.search.query || "q"] = $(".search-query", this.$el).val();
    }
    if (this.sortDir && this.sortCol) {
      data.sort_dir = this.sortDir;
      data.sort_col = this.sortCol;
    }
    data.page = this.page;
    data.size = this.size;
    this.collection.fetch({
      data: data
    });
    return this;
  };

  TableView.prototype.capitalize = function(str) {
    return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
  };

  TableView.prototype.renderData = function() {
    var $elData;
    $elData = $("tbody", this.$el);
    if ($elData) {
      $elData.html(this.dataTemplate({
        collection: this.collection,
        columns: this.columns,
        empty: this.empty || ""
      }));
    }
    $(".page", this.$el).html(this.page);
    return this;
  };

  TableView.prototype.prevPage = function() {
    this.page = this.page - 1;
    if (this.page < 1) {
      return this.page = 1;
    } else {
      return this.update();
    }
  };

  TableView.prototype.nextPage = function() {
    if (this.collection.length === this.size) {
      this.page = this.page + 1;
      return this.update();
    }
  };

  TableView.prototype.toggleSort = function(e) {
    var cl, el;
    el = e.currentTarget;
    cl = el.className;
    if (cl.indexOf("sorting_desc") >= 0) {
      this.sortDir = "asc";
      cl = "sorting_asc";
    } else if (cl.indexOf("sorting") >= 0 || cl.indexOf("sorting_asc") >= 0) {
      this.sortDir = "desc";
      cl = "sorting_desc";
    } else {
      return this;
    }
    $("th.sorting_desc, th.sorting_asc", this.$el).removeClass("sorting_desc sorting_asc");
    $(el, this.$el).addClass(cl);
    this.sortCol = el.abbr;
    return this.update();
  };

  TableView.prototype.applyTemplate = function(template, model) {
    return ((model != null) && model && template({
      model: model
    })) || "";
  };

  TableView.prototype.render = function() {
    var _this = this;
    this.$el.html(this.template({
      columns: this.columns,
      empty: this.empty || "",
      title: this.applyTemplate(this.titleTemplate, this.title),
      search: this.applyTemplate(this.searchTemplate, this.search),
      filters: this.applyTemplate(this.filtersTemplate, _.map(this.filters, function(filter, name) {
        return _this.printFilter(name, filter);
      })),
      pagination: this.applyTemplate(this.paginationTemplate, this.pagination)
    }));
    return this.update();
  };

  return TableView;

})(Backbone.View);
